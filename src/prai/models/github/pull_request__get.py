# generated by datamodel-codegen:
#   filename:  pr-get-schema.json
#   timestamp: 2025-07-30T00:12:17+00:00

from __future__ import annotations
from enum import Enum
from pydantic import AnyUrl, BaseModel, Field
from datetime import datetime
from typing import List


class State(Enum):
    """
    State of this Pull Request. Either `open` or `closed`.
    """

    open = "open"
    closed = "closed"


class SimpleUser(BaseModel):
    """
    A GitHub user.
    """

    name: str | None = None
    email: str | None = None
    login: str = Field(..., examples=["octocat"])
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=["MDQ6VXNlcjE="])
    avatar_url: AnyUrl = Field(..., examples=["https://github.com/images/error/octocat_happy.gif"])
    gravatar_id: str | None = Field(..., examples=["41d064eb2195891e12d0413f63227ea7"])
    url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat"])
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat"])
    followers_url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat/followers"])
    following_url: str = Field(..., examples=["https://api.github.com/users/octocat/following{/other_user}"])
    gists_url: str = Field(..., examples=["https://api.github.com/users/octocat/gists{/gist_id}"])
    starred_url: str = Field(..., examples=["https://api.github.com/users/octocat/starred{/owner}{/repo}"])
    subscriptions_url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat/subscriptions"])
    organizations_url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat/orgs"])
    repos_url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat/repos"])
    events_url: str = Field(..., examples=["https://api.github.com/users/octocat/events{/privacy}"])
    received_events_url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat/received_events"])
    type: str = Field(..., examples=["User"])
    site_admin: bool
    starred_at: str | None = Field(default=None, examples=['"2020-07-09T00:17:55Z"'])
    user_view_type: str | None = Field(default=None, examples=["public"])


class Label(BaseModel):
    id: int
    node_id: str
    url: str
    name: str
    description: str | None = None
    color: str
    default: bool


class State1(Enum):
    """
    The state of the milestone.
    """

    open = "open"
    closed = "closed"


class Milestone(BaseModel):
    """
    A collection of related issues and pull requests.
    """

    url: AnyUrl = Field(..., examples=["https://api.github.com/repos/octocat/Hello-World/milestones/1"])
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat/Hello-World/milestones/v1.0"])
    labels_url: AnyUrl = Field(..., examples=["https://api.github.com/repos/octocat/Hello-World/milestones/1/labels"])
    id: int = Field(..., examples=[1002604])
    node_id: str = Field(..., examples=["MDk6TWlsZXN0b25lMTAwMjYwNA=="])
    number: int = Field(..., examples=[42])
    """
    The number of the milestone.
    """
    state: State1 = Field(..., examples=["open"])
    """
    The state of the milestone.
    """
    title: str = Field(..., examples=["v1.0"])
    """
    The title of the milestone.
    """
    description: str | None = Field(..., examples=["Tracking milestone for version 1.0"])
    creator: SimpleUser | None = None
    open_issues: int = Field(..., examples=[4])
    closed_issues: int = Field(..., examples=[8])
    created_at: datetime = Field(..., examples=["2011-04-10T20:09:31Z"])
    updated_at: datetime = Field(..., examples=["2014-03-03T18:58:10Z"])
    closed_at: datetime | None = Field(..., examples=["2013-02-12T13:22:01Z"])
    due_on: datetime | None = Field(..., examples=["2012-10-09T23:39:01Z"])


class TeamSimple(BaseModel):
    """
    Groups of organization members that gives permissions on specified repositories.
    """

    id: int = Field(..., examples=[1])
    """
    Unique identifier of the team
    """
    node_id: str = Field(..., examples=["MDQ6VGVhbTE="])
    url: AnyUrl = Field(..., examples=["https://api.github.com/organizations/1/team/1"])
    """
    URL for the team
    """
    members_url: str = Field(..., examples=["https://api.github.com/organizations/1/team/1/members{/member}"])
    name: str = Field(..., examples=["Justice League"])
    """
    Name of the team
    """
    description: str | None = Field(..., examples=["A great team."])
    """
    Description of the team
    """
    permission: str = Field(..., examples=["admin"])
    """
    Permission that the team will have for its repositories
    """
    privacy: str | None = Field(default=None, examples=["closed"])
    """
    The level of privacy this team should have
    """
    notification_setting: str | None = Field(default=None, examples=["notifications_enabled"])
    """
    The notification setting the team has set
    """
    html_url: AnyUrl = Field(..., examples=["https://github.com/orgs/rails/teams/core"])
    repositories_url: AnyUrl = Field(..., examples=["https://api.github.com/organizations/1/team/1/repos"])
    slug: str = Field(..., examples=["justice-league"])
    ldap_dn: str | None = Field(default=None, examples=["uid=example,ou=users,dc=github,dc=com"])
    """
    Distinguished Name (DN) that team maps to within LDAP environment
    """


class LicenseSimple(BaseModel):
    """
    License Simple
    """

    key: str = Field(..., examples=["mit"])
    name: str = Field(..., examples=["MIT License"])
    url: AnyUrl | None = Field(..., examples=["https://api.github.com/licenses/mit"])
    spdx_id: str | None = Field(..., examples=["MIT"])
    node_id: str = Field(..., examples=["MDc6TGljZW5zZW1pdA=="])
    html_url: AnyUrl | None = None


class Permissions(BaseModel):
    admin: bool
    pull: bool
    triage: bool | None = None
    push: bool
    maintain: bool | None = None


class SquashMergeCommitTitle(Enum):
    """
    The default value for a squash merge commit title:

    - `PR_TITLE` - default to the pull request's title.
    - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
    """

    PR_TITLE = "PR_TITLE"
    COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"


class SquashMergeCommitMessage(Enum):
    """
    The default value for a squash merge commit message:

    - `PR_BODY` - default to the pull request's body.
    - `COMMIT_MESSAGES` - default to the branch's commit messages.
    - `BLANK` - default to a blank commit message.
    """

    PR_BODY = "PR_BODY"
    COMMIT_MESSAGES = "COMMIT_MESSAGES"
    BLANK = "BLANK"


class MergeCommitTitle(Enum):
    """
    The default value for a merge commit title.

    - `PR_TITLE` - default to the pull request's title.
    - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
    """

    PR_TITLE = "PR_TITLE"
    MERGE_MESSAGE = "MERGE_MESSAGE"


class MergeCommitMessage(Enum):
    """
    The default value for a merge commit message.

    - `PR_TITLE` - default to the pull request's title.
    - `PR_BODY` - default to the pull request's body.
    - `BLANK` - default to a blank commit message.
    """

    PR_BODY = "PR_BODY"
    PR_TITLE = "PR_TITLE"
    BLANK = "BLANK"


class CodeSearchIndexStatus(BaseModel):
    """
    The status of the code search index for this repository
    """

    lexical_search_ok: bool | None = None
    lexical_commit_sha: str | None = None


class Repository(BaseModel):
    """
    A repository on GitHub.
    """

    id: int = Field(..., examples=[42])
    """
    Unique identifier of the repository
    """
    node_id: str = Field(..., examples=["MDEwOlJlcG9zaXRvcnkxMjk2MjY5"])
    name: str = Field(..., examples=["Team Environment"])
    """
    The name of the repository.
    """
    full_name: str = Field(..., examples=["octocat/Hello-World"])
    license: LicenseSimple | None = None
    forks: int
    permissions: Permissions | None = None
    owner: SimpleUser = Field(..., title="Simple User")
    """
    A GitHub user.
    """
    private: bool
    """
    Whether the repository is private or public.
    """
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat/Hello-World"])
    description: str | None = Field(..., examples=["This your first repo!"])
    fork: bool
    url: AnyUrl = Field(..., examples=["https://api.github.com/repos/octocat/Hello-World"])
    archive_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"])
    assignees_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/assignees{/user}"])
    blobs_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"])
    branches_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/branches{/branch}"])
    collaborators_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"]
    )
    comments_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/comments{/number}"])
    commits_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/commits{/sha}"])
    compare_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"])
    contents_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/contents/{+path}"])
    contributors_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/contributors"])
    deployments_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/deployments"])
    downloads_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/downloads"])
    events_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/events"])
    forks_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/forks"])
    git_commits_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"])
    git_refs_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"])
    git_tags_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"])
    git_url: str = Field(..., examples=["git:github.com/octocat/Hello-World.git"])
    issue_comment_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"]
    )
    issue_events_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"]
    )
    issues_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/issues{/number}"])
    keys_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"])
    labels_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/labels{/name}"])
    languages_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/languages"])
    merges_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/merges"])
    milestones_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/milestones{/number}"])
    notifications_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"]
    )
    pulls_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/pulls{/number}"])
    releases_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/releases{/id}"])
    ssh_url: str = Field(..., examples=["git@github.com:octocat/Hello-World.git"])
    stargazers_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/stargazers"])
    statuses_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"])
    subscribers_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/subscribers"])
    subscription_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/subscription"])
    tags_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/tags"])
    teams_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/teams"])
    trees_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"])
    clone_url: str = Field(..., examples=["https://github.com/octocat/Hello-World.git"])
    mirror_url: AnyUrl | None = Field(..., examples=["git:git.example.com/octocat/Hello-World"])
    hooks_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/hooks"])
    svn_url: AnyUrl = Field(..., examples=["https://svn.github.com/octocat/Hello-World"])
    homepage: AnyUrl | None = Field(..., examples=["https://github.com"])
    language: str | None = None
    forks_count: int = Field(..., examples=[9])
    stargazers_count: int = Field(..., examples=[80])
    watchers_count: int = Field(..., examples=[80])
    size: int = Field(..., examples=[108])
    """
    The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
    """
    default_branch: str = Field(..., examples=["master"])
    """
    The default branch of the repository.
    """
    open_issues_count: int = Field(..., examples=[0])
    is_template: bool | None = Field(default=False, examples=[True])
    """
    Whether this repository acts as a template that can be used to generate new repositories.
    """
    topics: List[str] | None = None
    has_issues: bool = Field(..., examples=[True])
    """
    Whether issues are enabled.
    """
    has_projects: bool = Field(..., examples=[True])
    """
    Whether projects are enabled.
    """
    has_wiki: bool = Field(..., examples=[True])
    """
    Whether the wiki is enabled.
    """
    has_pages: bool
    has_downloads: bool = Field(..., examples=[True])
    """
    Whether downloads are enabled.
    """
    has_discussions: bool | None = Field(default=False, examples=[True])
    """
    Whether discussions are enabled.
    """
    archived: bool
    """
    Whether the repository is archived.
    """
    disabled: bool
    """
    Returns whether or not this repository disabled.
    """
    visibility: str | None = "public"
    """
    The repository visibility: public, private, or internal.
    """
    pushed_at: datetime | None = Field(..., examples=["2011-01-26T19:06:43Z"])
    created_at: datetime | None = Field(..., examples=["2011-01-26T19:01:12Z"])
    updated_at: datetime | None = Field(..., examples=["2011-01-26T19:14:43Z"])
    allow_rebase_merge: bool | None = Field(default=True, examples=[True])
    """
    Whether to allow rebase merges for pull requests.
    """
    temp_clone_token: str | None = None
    allow_squash_merge: bool | None = Field(default=True, examples=[True])
    """
    Whether to allow squash merges for pull requests.
    """
    allow_auto_merge: bool | None = Field(default=False, examples=[False])
    """
    Whether to allow Auto-merge to be used on pull requests.
    """
    delete_branch_on_merge: bool | None = Field(default=False, examples=[False])
    """
    Whether to delete head branches when pull requests are merged
    """
    allow_update_branch: bool | None = Field(default=False, examples=[False])
    """
    Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
    """
    use_squash_pr_title_as_default: bool | None = False
    """
    Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
    """
    squash_merge_commit_title: SquashMergeCommitTitle | None = None
    """
    The default value for a squash merge commit title:

    - `PR_TITLE` - default to the pull request's title.
    - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
    """
    squash_merge_commit_message: SquashMergeCommitMessage | None = None
    """
    The default value for a squash merge commit message:

    - `PR_BODY` - default to the pull request's body.
    - `COMMIT_MESSAGES` - default to the branch's commit messages.
    - `BLANK` - default to a blank commit message.
    """
    merge_commit_title: MergeCommitTitle | None = None
    """
    The default value for a merge commit title.

    - `PR_TITLE` - default to the pull request's title.
    - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
    """
    merge_commit_message: MergeCommitMessage | None = None
    """
    The default value for a merge commit message.

    - `PR_TITLE` - default to the pull request's title.
    - `PR_BODY` - default to the pull request's body.
    - `BLANK` - default to a blank commit message.
    """
    allow_merge_commit: bool | None = Field(default=True, examples=[True])
    """
    Whether to allow merge commits for pull requests.
    """
    allow_forking: bool | None = None
    """
    Whether to allow forking this repo
    """
    web_commit_signoff_required: bool | None = False
    """
    Whether to require contributors to sign off on web-based commits
    """
    open_issues: int
    watchers: int
    master_branch: str | None = None
    starred_at: str | None = Field(default=None, examples=['"2020-07-09T00:17:42Z"'])
    anonymous_access_enabled: bool | None = None
    """
    Whether anonymous git access is enabled for this repository
    """
    code_search_index_status: CodeSearchIndexStatus | None = None
    """
    The status of the code search index for this repository
    """


class Head(BaseModel):
    label: str
    ref: str
    repo: Repository = Field(..., title="Repository")
    """
    A repository on GitHub.
    """
    sha: str
    user: SimpleUser = Field(..., title="Simple User")
    """
    A GitHub user.
    """


class Repository1(BaseModel):
    """
    A repository on GitHub.
    """

    id: int = Field(..., examples=[42])
    """
    Unique identifier of the repository
    """
    node_id: str = Field(..., examples=["MDEwOlJlcG9zaXRvcnkxMjk2MjY5"])
    name: str = Field(..., examples=["Team Environment"])
    """
    The name of the repository.
    """
    full_name: str = Field(..., examples=["octocat/Hello-World"])
    license: LicenseSimple | None = None
    forks: int
    permissions: Permissions | None = None
    owner: SimpleUser = Field(..., title="Simple User")
    """
    A GitHub user.
    """
    private: bool
    """
    Whether the repository is private or public.
    """
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat/Hello-World"])
    description: str | None = Field(..., examples=["This your first repo!"])
    fork: bool
    url: AnyUrl = Field(..., examples=["https://api.github.com/repos/octocat/Hello-World"])
    archive_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"])
    assignees_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/assignees{/user}"])
    blobs_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"])
    branches_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/branches{/branch}"])
    collaborators_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"]
    )
    comments_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/comments{/number}"])
    commits_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/commits{/sha}"])
    compare_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"])
    contents_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/contents/{+path}"])
    contributors_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/contributors"])
    deployments_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/deployments"])
    downloads_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/downloads"])
    events_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/events"])
    forks_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/forks"])
    git_commits_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"])
    git_refs_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"])
    git_tags_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"])
    git_url: str = Field(..., examples=["git:github.com/octocat/Hello-World.git"])
    issue_comment_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"]
    )
    issue_events_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"]
    )
    issues_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/issues{/number}"])
    keys_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"])
    labels_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/labels{/name}"])
    languages_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/languages"])
    merges_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/merges"])
    milestones_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/milestones{/number}"])
    notifications_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"]
    )
    pulls_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/pulls{/number}"])
    releases_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/releases{/id}"])
    ssh_url: str = Field(..., examples=["git@github.com:octocat/Hello-World.git"])
    stargazers_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/stargazers"])
    statuses_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"])
    subscribers_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/subscribers"])
    subscription_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/subscription"])
    tags_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/tags"])
    teams_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/teams"])
    trees_url: str = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"])
    clone_url: str = Field(..., examples=["https://github.com/octocat/Hello-World.git"])
    mirror_url: AnyUrl | None = Field(..., examples=["git:git.example.com/octocat/Hello-World"])
    hooks_url: AnyUrl = Field(..., examples=["http://api.github.com/repos/octocat/Hello-World/hooks"])
    svn_url: AnyUrl = Field(..., examples=["https://svn.github.com/octocat/Hello-World"])
    homepage: AnyUrl | None = Field(..., examples=["https://github.com"])
    language: str | None = None
    forks_count: int = Field(..., examples=[9])
    stargazers_count: int = Field(..., examples=[80])
    watchers_count: int = Field(..., examples=[80])
    size: int = Field(..., examples=[108])
    """
    The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
    """
    default_branch: str = Field(..., examples=["master"])
    """
    The default branch of the repository.
    """
    open_issues_count: int = Field(..., examples=[0])
    is_template: bool | None = Field(default=False, examples=[True])
    """
    Whether this repository acts as a template that can be used to generate new repositories.
    """
    topics: List[str] | None = None
    has_issues: bool = Field(..., examples=[True])
    """
    Whether issues are enabled.
    """
    has_projects: bool = Field(..., examples=[True])
    """
    Whether projects are enabled.
    """
    has_wiki: bool = Field(..., examples=[True])
    """
    Whether the wiki is enabled.
    """
    has_pages: bool
    has_downloads: bool = Field(..., examples=[True])
    """
    Whether downloads are enabled.
    """
    has_discussions: bool | None = Field(default=False, examples=[True])
    """
    Whether discussions are enabled.
    """
    archived: bool
    """
    Whether the repository is archived.
    """
    disabled: bool
    """
    Returns whether or not this repository disabled.
    """
    visibility: str | None = "public"
    """
    The repository visibility: public, private, or internal.
    """
    pushed_at: datetime | None = Field(..., examples=["2011-01-26T19:06:43Z"])
    created_at: datetime | None = Field(..., examples=["2011-01-26T19:01:12Z"])
    updated_at: datetime | None = Field(..., examples=["2011-01-26T19:14:43Z"])
    allow_rebase_merge: bool | None = Field(default=True, examples=[True])
    """
    Whether to allow rebase merges for pull requests.
    """
    temp_clone_token: str | None = None
    allow_squash_merge: bool | None = Field(default=True, examples=[True])
    """
    Whether to allow squash merges for pull requests.
    """
    allow_auto_merge: bool | None = Field(default=False, examples=[False])
    """
    Whether to allow Auto-merge to be used on pull requests.
    """
    delete_branch_on_merge: bool | None = Field(default=False, examples=[False])
    """
    Whether to delete head branches when pull requests are merged
    """
    allow_update_branch: bool | None = Field(default=False, examples=[False])
    """
    Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
    """
    use_squash_pr_title_as_default: bool | None = False
    """
    Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
    """
    squash_merge_commit_title: SquashMergeCommitTitle | None = None
    """
    The default value for a squash merge commit title:

    - `PR_TITLE` - default to the pull request's title.
    - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
    """
    squash_merge_commit_message: SquashMergeCommitMessage | None = None
    """
    The default value for a squash merge commit message:

    - `PR_BODY` - default to the pull request's body.
    - `COMMIT_MESSAGES` - default to the branch's commit messages.
    - `BLANK` - default to a blank commit message.
    """
    merge_commit_title: MergeCommitTitle | None = None
    """
    The default value for a merge commit title.

    - `PR_TITLE` - default to the pull request's title.
    - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
    """
    merge_commit_message: MergeCommitMessage | None = None
    """
    The default value for a merge commit message.

    - `PR_TITLE` - default to the pull request's title.
    - `PR_BODY` - default to the pull request's body.
    - `BLANK` - default to a blank commit message.
    """
    allow_merge_commit: bool | None = Field(default=True, examples=[True])
    """
    Whether to allow merge commits for pull requests.
    """
    allow_forking: bool | None = None
    """
    Whether to allow forking this repo
    """
    web_commit_signoff_required: bool | None = False
    """
    Whether to require contributors to sign off on web-based commits
    """
    open_issues: int
    watchers: int
    master_branch: str | None = None
    starred_at: str | None = Field(default=None, examples=['"2020-07-09T00:17:42Z"'])
    anonymous_access_enabled: bool | None = None
    """
    Whether anonymous git access is enabled for this repository
    """
    code_search_index_status: CodeSearchIndexStatus | None = None
    """
    The status of the code search index for this repository
    """


class Base(BaseModel):
    label: str
    ref: str
    repo: Repository1 = Field(..., title="Repository")
    """
    A repository on GitHub.
    """
    sha: str
    user: SimpleUser = Field(..., title="Simple User")
    """
    A GitHub user.
    """


class Link(BaseModel):
    """
    Hypermedia Link
    """

    href: str


class FieldLinks(BaseModel):
    comments: Link = Field(..., title="Link")
    """
    Hypermedia Link
    """
    commits: Link = Field(..., title="Link")
    """
    Hypermedia Link
    """
    statuses: Link = Field(..., title="Link")
    """
    Hypermedia Link
    """
    html: Link = Field(..., title="Link")
    """
    Hypermedia Link
    """
    issue: Link = Field(..., title="Link")
    """
    Hypermedia Link
    """
    review_comments: Link = Field(..., title="Link")
    """
    Hypermedia Link
    """
    review_comment: Link = Field(..., title="Link")
    """
    Hypermedia Link
    """
    self: Link = Field(..., title="Link")
    """
    Hypermedia Link
    """


class AuthorAssociation(Enum):
    """
    How the author is associated with the repository.
    """

    COLLABORATOR = "COLLABORATOR"
    CONTRIBUTOR = "CONTRIBUTOR"
    FIRST_TIMER = "FIRST_TIMER"
    FIRST_TIME_CONTRIBUTOR = "FIRST_TIME_CONTRIBUTOR"
    MANNEQUIN = "MANNEQUIN"
    MEMBER = "MEMBER"
    NONE = "NONE"
    OWNER = "OWNER"


class MergeMethod(Enum):
    """
    The merge method to use.
    """

    merge = "merge"
    squash = "squash"
    rebase = "rebase"


class AutoMerge(BaseModel):
    """
    The status of auto merging a pull request.
    """

    enabled_by: SimpleUser = Field(..., title="Simple User")
    """
    A GitHub user.
    """
    merge_method: MergeMethod
    """
    The merge method to use.
    """
    commit_title: str
    """
    Title for the merge commit message.
    """
    commit_message: str
    """
    Commit message for the merge commit.
    """


class PullRequest(BaseModel):
    """
    Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
    """

    url: AnyUrl = Field(..., examples=["https://api.github.com/repos/octocat/Hello-World/pulls/1347"])
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=["MDExOlB1bGxSZXF1ZXN0MQ=="])
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat/Hello-World/pull/1347"])
    diff_url: AnyUrl = Field(..., examples=["https://github.com/octocat/Hello-World/pull/1347.diff"])
    patch_url: AnyUrl = Field(..., examples=["https://github.com/octocat/Hello-World/pull/1347.patch"])
    issue_url: AnyUrl = Field(..., examples=["https://api.github.com/repos/octocat/Hello-World/issues/1347"])
    commits_url: AnyUrl = Field(..., examples=["https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"])
    review_comments_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"]
    )
    review_comment_url: str = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"]
    )
    comments_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"]
    )
    statuses_url: AnyUrl = Field(
        ...,
        examples=["https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"],
    )
    number: int = Field(..., examples=[42])
    """
    Number uniquely identifying the pull request within its repository.
    """
    state: State = Field(..., examples=["open"])
    """
    State of this Pull Request. Either `open` or `closed`.
    """
    locked: bool = Field(..., examples=[True])
    title: str = Field(..., examples=["Amazing new feature"])
    """
    The title of the pull request.
    """
    user: SimpleUser = Field(..., title="Simple User")
    """
    A GitHub user.
    """
    body: str | None = Field(..., examples=["Please pull these awesome changes"])
    labels: List[Label]
    milestone: Milestone | None = None
    active_lock_reason: str | None = Field(default=None, examples=["too heated"])
    created_at: datetime = Field(..., examples=["2011-01-26T19:01:12Z"])
    updated_at: datetime = Field(..., examples=["2011-01-26T19:01:12Z"])
    closed_at: datetime | None = Field(..., examples=["2011-01-26T19:01:12Z"])
    merged_at: datetime | None = Field(..., examples=["2011-01-26T19:01:12Z"])
    merge_commit_sha: str | None = Field(..., examples=["e5bd3914e2e596debea16f433f57875b5b90bcd6"])
    assignee: SimpleUser | None = None
    assignees: List[SimpleUser] | None = None
    requested_reviewers: List[SimpleUser] | None = None
    requested_teams: List[TeamSimple] | None = None
    head: Head
    base: Base
    field_links: FieldLinks = Field(..., alias="_links")
    author_association: AuthorAssociation = Field(..., examples=["OWNER"], title="author_association")
    """
    How the author is associated with the repository.
    """
    auto_merge: AutoMerge | None = Field(..., title="Auto merge")
    """
    The status of auto merging a pull request.
    """
    draft: bool | None = Field(default=None, examples=[False])
    """
    Indicates whether or not the pull request is a draft.
    """
    merged: bool
    mergeable: bool | None = Field(..., examples=[True])
    rebaseable: bool | None = Field(default=None, examples=[True])
    mergeable_state: str = Field(..., examples=["clean"])
    merged_by: SimpleUser | None = None
    comments: int = Field(..., examples=[10])
    review_comments: int = Field(..., examples=[0])
    maintainer_can_modify: bool = Field(..., examples=[True])
    """
    Indicates whether maintainers can modify the pull request.
    """
    commits: int = Field(..., examples=[3])
    additions: int = Field(..., examples=[100])
    deletions: int = Field(..., examples=[3])
    changed_files: int = Field(..., examples=[5])
