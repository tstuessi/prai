/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint.
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/github/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Github User */
        get: operations["get_github_user_api_github_user_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vite.svg": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Serve Vite Svg
         * @description Serve the vite.svg file.
         */
        get: operations["serve_vite_svg_vite_svg_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{full_path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Serve Spa
         * @description Serve the single-page application for all non-API routes.
         */
        get: operations["serve_spa__full_path__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** Plan */
        Plan: {
            /** Collaborators */
            collaborators: number;
            /** Name */
            name: string;
            /** Space */
            space: number;
            /** Private Repos */
            private_repos: number;
        };
        /** PrivateUser */
        PrivateUser: {
            /** Login */
            login: string;
            /** Id */
            id: number;
            /** User View Type */
            user_view_type?: string | null;
            /** Node Id */
            node_id: string;
            /**
             * Avatar Url
             * Format: uri
             */
            avatar_url: string;
            /** Gravatar Id */
            gravatar_id: string | null;
            /**
             * Url
             * Format: uri
             */
            url: string;
            /**
             * Html Url
             * Format: uri
             */
            html_url: string;
            /**
             * Followers Url
             * Format: uri
             */
            followers_url: string;
            /** Following Url */
            following_url: string;
            /** Gists Url */
            gists_url: string;
            /** Starred Url */
            starred_url: string;
            /**
             * Subscriptions Url
             * Format: uri
             */
            subscriptions_url: string;
            /**
             * Organizations Url
             * Format: uri
             */
            organizations_url: string;
            /**
             * Repos Url
             * Format: uri
             */
            repos_url: string;
            /** Events Url */
            events_url: string;
            /**
             * Received Events Url
             * Format: uri
             */
            received_events_url: string;
            /** Type */
            type: string;
            /** Site Admin */
            site_admin: boolean;
            /** Name */
            name: string | null;
            /** Company */
            company: string | null;
            /** Blog */
            blog: string | null;
            /** Location */
            location: string | null;
            /** Email */
            email: string | null;
            /** Notification Email */
            notification_email?: string | null;
            /** Hireable */
            hireable: boolean | null;
            /** Bio */
            bio: string | null;
            /** Twitter Username */
            twitter_username?: string | null;
            /** Public Repos */
            public_repos: number;
            /** Public Gists */
            public_gists: number;
            /** Followers */
            followers: number;
            /** Following */
            following: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Private Gists */
            private_gists: number;
            /** Total Private Repos */
            total_private_repos: number;
            /** Owned Private Repos */
            owned_private_repos: number;
            /** Disk Usage */
            disk_usage: number;
            /** Collaborators */
            collaborators: number;
            /** Two Factor Authentication */
            two_factor_authentication: boolean;
            plan?: components["schemas"]["Plan"] | null;
            /** Business Plus */
            business_plus?: boolean | null;
            /** Ldap Dn */
            ldap_dn?: string | null;
        };
        /** PublicUser */
        PublicUser: {
            /** Login */
            login: string;
            /** Id */
            id: number;
            /** User View Type */
            user_view_type?: string | null;
            /** Node Id */
            node_id: string;
            /**
             * Avatar Url
             * Format: uri
             */
            avatar_url: string;
            /** Gravatar Id */
            gravatar_id: string | null;
            /**
             * Url
             * Format: uri
             */
            url: string;
            /**
             * Html Url
             * Format: uri
             */
            html_url: string;
            /**
             * Followers Url
             * Format: uri
             */
            followers_url: string;
            /** Following Url */
            following_url: string;
            /** Gists Url */
            gists_url: string;
            /** Starred Url */
            starred_url: string;
            /**
             * Subscriptions Url
             * Format: uri
             */
            subscriptions_url: string;
            /**
             * Organizations Url
             * Format: uri
             */
            organizations_url: string;
            /**
             * Repos Url
             * Format: uri
             */
            repos_url: string;
            /** Events Url */
            events_url: string;
            /**
             * Received Events Url
             * Format: uri
             */
            received_events_url: string;
            /** Type */
            type: string;
            /** Site Admin */
            site_admin: boolean;
            /** Name */
            name: string | null;
            /** Company */
            company: string | null;
            /** Blog */
            blog: string | null;
            /** Location */
            location: string | null;
            /** Email */
            email: string | null;
            /** Notification Email */
            notification_email?: string | null;
            /** Hireable */
            hireable: boolean | null;
            /** Bio */
            bio: string | null;
            /** Twitter Username */
            twitter_username?: string | null;
            /** Public Repos */
            public_repos: number;
            /** Public Gists */
            public_gists: number;
            /** Followers */
            followers: number;
            /** Following */
            following: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            plan?: components["schemas"]["Plan"] | null;
            /** Private Gists */
            private_gists?: number | null;
            /** Total Private Repos */
            total_private_repos?: number | null;
            /** Owned Private Repos */
            owned_private_repos?: number | null;
            /** Disk Usage */
            disk_usage?: number | null;
            /** Collaborators */
            collaborators?: number | null;
        };
        /** User */
        User: components["schemas"]["PrivateUser"] | components["schemas"]["PublicUser"];
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_github_user_api_github_user_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    serve_vite_svg_vite_svg_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    serve_spa__full_path__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                full_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
